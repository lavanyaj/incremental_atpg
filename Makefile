# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
#GTEST_DIR = /usr/local/gtest-1.6.0
GTEST_DIR = /opt/google/googletest-read-only

#CXX = /opt/local/bin/x86_64-apple-darwin11-g++-mp-4.7
#CXX = /usr/bin/x86_64-linux-gnu-g++-4.6
CXX = /usr/bin/g++

# Where to find user code.
USER_DIR = .

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Flags passed to the preprocessor.
CPP_INCLUDE_FLAGS += -isystem$(GTEST_DIR)/include  -I$(GTEST_DIR) -I/usr/include/boost
CPP_LIB_FLAGS += -L/usr/lib -llog4cxx -lstdc++ -lapr-1 -laprutil-1 -lpthread -lgtest_main

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -std=c++0x

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = set_cover_test greedy_set_cover_test lazy_set_cover_test util_test evaluate_test

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) *.o


# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function. I added libgtest.so and libgtest_main.so. So just -lgtest etc.

set_cover.o : set_cover.cc set_cover.h
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c set_cover.cc

set_cover_test.o : set_cover_test.cc set_cover.h
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c set_cover_test.cc

set_cover_test : set_cover.o set_cover_test.o
	$(CXX) $(CXXFLAGS) $^ $(CPP_LIB_FLAGS) -o $@

greedy_set_cover.o : greedy_set_cover.cc greedy_set_cover.h
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c greedy_set_cover.cc

greedy_set_cover_test.o : greedy_set_cover_test.cc greedy_set_cover.h set_cover.h 
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c greedy_set_cover_test.cc

greedy_set_cover_test : set_cover.o greedy_set_cover.o greedy_set_cover_test.o
	$(CXX) $(CXXFLAGS)  $^ $(CPP_LIB_FLAGS) -o $@

lazy_set_cover.o : lazy_set_cover.cc lazy_set_cover.h
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c lazy_set_cover.cc

lazy_set_cover_test.o : lazy_set_cover_test.cc lazy_set_cover.h set_cover.h 
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c lazy_set_cover_test.cc

lazy_set_cover_test : set_cover.o lazy_set_cover.o lazy_set_cover_test.o
	$(CXX) $(CXXFLAGS)  $^ $(CPP_LIB_FLAGS) -o $@

online_set_cover.o : online_set_cover.cc online_set_cover.h
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c online_set_cover.cc

online_set_cover_test.o : online_set_cover_test.cc online_set_cover.h set_cover.h 
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c online_set_cover_test.cc

online_set_cover_test : set_cover.o lazy_set_cover.o greedy_set_cover.o online_set_cover.o online_set_cover_test.o 
	$(CXX) $(CXXFLAGS)  $^ $(CPP_LIB_FLAGS) -o $@

util.o : util.cc util.h
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c util.cc

util_test.o : util_test.cc util.h
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c util_test.cc

util_test : util.o util_test.o 
	$(CXX) $(CXXFLAGS)  $^ $(CPP_LIB_FLAGS) -o $@

evaluate.o : evaluate.cc evaluate.h
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c evaluate.cc

evaluate_test.o : evaluate_test.cc evaluate.h
	$(CXX) $(CPP_INCLUDE_FLAGS) $(CXXFLAGS) -c evaluate_test.cc

evaluate_test : evaluate.o evaluate_test.o set_cover.o lazy_set_cover.o greedy_set_cover.o online_set_cover.o util.o
	$(CXX) $(CXXFLAGS)  $^ $(CPP_LIB_FLAGS) -o $@
